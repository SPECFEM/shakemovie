/*-----------------------------------------------------------------------
  shakeMovie

  originally written by Santiago v Lombeyda, Caltech, 11/2006

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
-----------------------------------------------------------------------*/

#define NP 3
#define NMAT 1
#define NRANSI
#define ROTATE(a,i,j,k,l) g=a[i][j];h=a[k][l];a[i][j]=g-s*(h+g*tau);\
        a[k][l]=h+s*(g-h*tau);

/* ----------------------------------------------------------------------------------------------- */

void jacobi(double **a, int n, double d[], double **v, int *nrot) {

        int j,iq,ip,i;
        double tresh,theta,tau,t,sm,s,h,g,c,*b,*z;

        b=vector(1,n);
        z=vector(1,n);
        for (ip=1;ip<=n;ip++) {
                for (iq=1;iq<=n;iq++) v[ip][iq]=0.0;
                v[ip][ip]=1.0;
        }
        for (ip=1;ip<=n;ip++) {
                b[ip]=d[ip]=a[ip][ip];
                z[ip]=0.0;
        }
        *nrot=0;
        for (i=1;i<=50;i++) {
                sm=0.0;
                for (ip=1;ip<=n-1;ip++) {
                        for (iq=ip+1;iq<=n;iq++)
                                sm += (double)fabs((double)a[ip][iq]);
                }
                if (sm == 0.0) {
                        free_vector(z,1,n);
                        free_vector(b,1,n);
                        return;
                }
                if (i < 4)
                        tresh=(double)0.2*sm/((double)(n*n));
                else
                        tresh=0.0;
                for (ip=1;ip<=n-1;ip++) {
                        for (iq=ip+1;iq<=n;iq++) {
                                g=(double)(100.0*fabs(a[ip][iq]));
                                if (i > 4 && (double)(fabs(d[ip])+g) == (double)fabs(d[ip])
                                        && (double)(fabs(d[iq])+g) == (double)fabs(d[iq]))
                                        a[ip][iq]=0.0;
                                else if (fabs(a[ip][iq]) > tresh) {
                                        h=d[iq]-d[ip];
                                        if ((double)(fabs(h)+g) == (double)fabs(h))
                                                t=(a[ip][iq])/h;
                                        else {
                                                theta=(double)0.5*h/(a[ip][iq]);
                                                t=(double)(1.0/(fabs(theta)+sqrt(1.0+theta*theta)));
                                                if (theta < 0.0) t = -t;
                                        }
                                        c=(double)(1.0/sqrt(1+t*t));
                                        s=t*c;
                                        tau=s/((double)1.0+c);
                                        h=t*a[ip][iq];
                                        z[ip] -= h;
                                        z[iq] += h;
                                        d[ip] -= h;
                                        d[iq] += h;
                                        a[ip][iq]=0.0;
                                        for (j=1;j<=ip-1;j++) {
                                                ROTATE(a,j,ip,j,iq)
                                        }
                                        for (j=ip+1;j<=iq-1;j++) {
                                                ROTATE(a,ip,j,j,iq)
                                        }
                                        for (j=iq+1;j<=n;j++) {
                                                ROTATE(a,ip,j,iq,j)
                                        }
                                        for (j=1;j<=n;j++) {
                                                ROTATE(v,j,ip,j,iq)
                                        }
                                        ++(*nrot);
                                }
                        }
                }
                for (ip=1;ip<=n;ip++) {
                        b[ip] += z[ip];
                        d[ip]=b[ip];
                        z[ip]=0.0;
                }
        }
        nrerror((char*)"Too many iterations in routine jacobi");
}

#undef ROTATE
#undef NRANSI
