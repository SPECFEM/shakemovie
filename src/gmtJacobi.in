/*-----------------------------------------------------------------------
  shakeMovie

  originally written by Santiago v Lombeyda, Caltech, 11/2006

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
-----------------------------------------------------------------------*/

// Jacobi transformation
//
// based on the idea of Numerical Recipes, Jacobi transformations of a symmetric matrix.
// to use with the public domain nrutil C-routines.
//
// note: Numerical Recipes has a copyright on its published routines.
//       As a book owner, it allows you to make a copy of the routine in the book and run it
//       for personal use on your machine. This is the only free license, called the "immediate license".
//       It is prohibited to distribute that code to others.
//
//       As noted by the authors however, a copyright doesn't protect the idea, but only the expression
//       of those in a particular form. If you analyze the ideas contained in a program, and then express
//       those ideas in your own completely different implementation, then that new program implementation belongs to you.
//       They have done this for some programs in the book. This is done here with the Jacobi transformation routine.

#define NP 3
#define NITERATIONS 50

/* ----------------------------------------------------------------------------------------------- */

static inline void rotate_matrix(double **A, double s, double tau, int i, int j, int k, int l) {
  double tmp1,tmp2;
  tmp1 = A[i][j];
  tmp2 = A[k][l];

  A[i][j] = tmp1 - s * (tmp2 + tmp1 * tau);
  A[k][l] = tmp2 + s * (tmp1 - tmp2 * tau);
}

/* ----------------------------------------------------------------------------------------------- */

void jacobi_transformation(double **A_sym, int n, double d_eig[], double **V_ortho, int *nrotations) {

  // Jacobi transformation
  // note: we use the same number of routine arguments as the nr routine to be compatible with the public domain utils.

  // A_sym         : (inout)  symmetric matrix, with dimension nxn
  // d_eig         : (out)    vector with eigenvalues of A
  // V_ortho       : (out)    orthogonal matrix (such that D = Q^T A Q), columns are eigenvectors
  // nrotations    : (out)    number of Jacobi rotations

  // sets initial eigenvalues to diagonal entries of A
  for (int i=1; i<=n; i++) {
    d_eig[i] = A_sym[i][i];
  }

  // initializes helper vectors
  // correction vector
  double* c_tmp = (double*) vector(1,n);
  for (int i=1; i<=n; i++) {
    c_tmp[i] = 0.0;
  }

  // temporary backup copy of eigenvalues
  double* d_tmp = (double*) vector(1,n);
  for (int i=1; i<=n; i++) {
    d_tmp[i] = d_eig[i];
  }

  // starts with unit matrix
  for (int i=1; i<=n; i++) {
    // off-diagonal
    for (int j=1; j<=n; j++) {
      if (i == j){
        // diagonal
        V_ortho[i][j] = 1.0;
      } else{
        // off-diagonal
        V_ortho[i][j] = 0.0;
      }
    }
  }

  // number of Jacobi rotations
  int num_rotations = 0;

  for (int iter=1; iter <= NITERATIONS; iter++) {

    // gets sum of off-diagonal entries
    double S_0 = 0.0;
    for (int i=1; i<=(n-1); i++) {
      for (int j=i+1; j<=n; j++) S_0 += (double) fabs(A_sym[i][j]);
    }

    // checks if matrix is diagonal, and work done
    if (S_0 == 0.0) {
      free_vector(c_tmp,1,n);
      free_vector(d_tmp,1,n);
      *nrotations = num_rotations;
      return;
    }

    // determines threshold value for beginning of iterations
    double threshold = 0.0;
    // for first three iterations, choose a higher threshold
    if (iter < 4){
      threshold = S_0 / ((double)(n*n * 5));
    }

    for (int i=1; i<=(n-1); i++) {
      // upper half
      for (int j=i+1; j<=n; j++) {
        // takes absolute value of off-diagonal element
        double size_Aij = fabs(A_sym[i][j]);

        // checks with machine precision if off-diagonal Aij is much smaller than diagonal entries:
        // | Aij | << | Aii | and | Aij | << | Ajj |
        double precision = (double) (100.0 * size_Aij); // takes same precision as nr Jacobi routine

        // flag
        bool Aij_is_small = ( (double) (fabs(d_eig[i]) + precision) == (double) fabs(d_eig[i]) &&
                              (double) (fabs(d_eig[j]) + precision) == (double) fabs(d_eig[j]) );

        if (iter > 4 && Aij_is_small) {
          // sets off-diagonal element to zero
          A_sym[i][j] = 0.0;

        } else if (size_Aij > threshold) {
          // rotates only if Aij is bigger than threshold
          double diff = d_eig[j] - d_eig[i]; // a_qq and a_pp

          // checks machine precision
          bool diff_is_small = ( (double) (fabs(diff) + precision) == (double) fabs(diff) );

          // sets root value
          double t = 0.0;
          if (diff_is_small) {
            t = A_sym[i][j] / diff;
          } else {
            // rotation angle
            double theta = diff / ((double) 2.0 * A_sym[i][j]);

            // smaller root
            if (theta < 0.0) {
              t = (double) (-1.0/(fabs(theta) + sqrt(1.0 + theta*theta)));
            } else{
              t = (double) (1.0/(fabs(theta) + sqrt(1.0 + theta*theta)));
            }
          }

          // defines factors c, s
          double c = (double) (1.0/sqrt(1 + t*t));
          double s = t * c;

          // defines factor tau
          double tau = s / ((double) 1.0 + c);

          // correction factor
          double corr = t * A_sym[i][j];

          // updates correction vector
          c_tmp[i] -= corr;
          c_tmp[j] += corr;

          // corrects eigenvalues
          d_eig[i] -= corr;
          d_eig[j] += corr;

          // sets A_ij to zero
          A_sym[i][j] = 0.0;

          // Jacobi rotations
          // for 1 <= k < i
          for (int k=1; k<=(i-1); k++) {
            rotate_matrix(A_sym,s,tau,k,i,k,j);
          }
          // for i < k < j
          for (int k=(i+1); k<=(j-1); k++) {
            rotate_matrix(A_sym,s,tau,i,k,k,j);
          }
          // for j < k <= n
          for (int k=(j+1); k<=n; k++) {
            rotate_matrix(A_sym,s,tau,i,k,j,k);
          }

          // columns of V are eigenvectors
          for (int k=1; k<=n; k++) {
            rotate_matrix(V_ortho,s,tau,k,i,k,j);
          }

          // increase Jacobi rotation counter
          num_rotations++;
        }
      }
    }

    // updates vectors
    for (int i=1; i<=n; i++) {
      // updates eigenvalues
      d_eig[i] = d_tmp[i] + c_tmp[i];
      // backup copy of eigenvalue vector
      d_tmp[i] = d_eig[i];
      // resets correction vector
      c_tmp[i] = 0.0;
    }
  }

  // reaching this should not occur, too few iterations
  nrerror((char*)"Too many iterations in routine jacobi");
}
